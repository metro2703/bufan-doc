(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{211:function(t,s,a){t.exports=a.p+"assets/img/memory-user-john.9c3475ef.svg"},212:function(t,s,a){t.exports=a.p+"assets/img/memory-user-john-lost.fda8f4fb.svg"},213:function(t,s,a){t.exports=a.p+"assets/img/memory-user-john-admin.b8d46412.svg"},214:function(t,s,a){t.exports=a.p+"assets/img/family.da067c44.svg"},215:function(t,s,a){t.exports=a.p+"assets/img/family-delete-refs.f63e85b0.svg"},216:function(t,s,a){t.exports=a.p+"assets/img/family-no-father.2d4788a7.svg"},217:function(t,s,a){t.exports=a.p+"assets/img/family-no-father-2.10cde306.svg"},218:function(t,s,a){t.exports=a.p+"assets/img/family-no-family.476baf7a.svg"},219:function(t,s,a){t.exports=a.p+"assets/img/garbage-collection-1.228589bf.svg"},220:function(t,s,a){t.exports=a.p+"assets/img/garbage-collection-2.4b90fcfa.svg"},221:function(t,s,a){t.exports=a.p+"assets/img/garbage-collection-3.6661c335.svg"},222:function(t,s,a){t.exports=a.p+"assets/img/garbage-collection-4.df635e9e.svg"},223:function(t,s,a){t.exports=a.p+"assets/img/garbage-collection-5.22fb9c67.svg"},369:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"垃圾回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),n("p",[t._v("对于开发者来说，JavaScript 的内存管理是自动的、无形的。我们创建的原始值、对象、函数……这一切都会占用内存。")]),t._v(" "),n("p",[t._v("当某个东西我们不再需要时会发生什么？")]),t._v(" "),n("p",[t._v("JS 有自动垃圾回收机制，它的原理很简单，就是找出那些不再继续使用的值，然后释放其占用的内存。这里最艰难的任务是找到不再需要使用的变量。")]),t._v(" "),n("h2",{attrs:{id:"可达性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可达性"}},[t._v("#")]),t._v(" 可达性")]),t._v(" "),n("p",[t._v("JavaScript 中主要的内存管理概念是"),n("strong",[t._v("可达性")]),t._v("。")]),t._v(" "),n("p",[t._v("简而言之，『可达』值是那些以某种方式可访问或可用的值。它们保证存储在内存中。")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("这里列出固有的可达值基本集合，这些值明显不能被释放。")]),t._v(" "),n("p",[t._v("比方说：")]),t._v(" "),n("ul",[n("li",[t._v("当前函数的局部变量和参数。")]),t._v(" "),n("li",[t._v("嵌套调用时，当前调用链上所有函数的变量与参数。")]),t._v(" "),n("li",[t._v("全局变量。")]),t._v(" "),n("li",[t._v("（还有一些内部的）")])]),t._v(" "),n("p",[t._v("这些值被称作"),n("strong",[t._v("根")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("如果一个值可以通过引用或引用链，从根值访问到，则认为这个值是可达的。")]),t._v(" "),n("p",[t._v("比方说，如果局部变量中有一个对象，并且该对象具有引用另一个对象的 property，则该对象被认为是可达的。而且它引用的内容也是可达的。下面是详细的例子。")])])]),t._v(" "),n("p",[t._v("在 JavaScript 引擎中有一个被称作"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)",target:"_blank",rel:"noopener noreferrer"}},[t._v("垃圾回收器"),n("OutboundLink")],1),t._v("的东西在后台执行。它监控着所有对象的状态，并删除掉那些已经不可达的。")]),t._v(" "),n("h2",{attrs:{id:"一个简单的例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个简单的例子"}},[t._v("#")]),t._v(" 一个简单的例子")]),t._v(" "),n("p",[t._v("这里有一个最简的例子：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// user 引用了这个对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(211),alt:""}})]),t._v(" "),n("p",[t._v("这里的箭头描述了一个对象引用。全局变量 "),n("code",[t._v('"user"')]),t._v(" 引用了对象 "),n("code",[t._v('{name："John"}')]),t._v("（为简洁起见，我们称它为 John）。John 的 "),n("code",[t._v('"name"')]),t._v(" 属性存储一个原始值，所以它被写在对象内部。")]),t._v(" "),n("p",[t._v("如果 "),n("code",[t._v("user")]),t._v(" 的值被覆盖了，这个引用就没了：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(212),alt:""}})]),t._v(" "),n("p",[t._v("现在 John 变成不可达的了。因为没有引用了，就不能访问到它了。垃圾回收器会认为它是垃圾数据，然后释放内存。")]),t._v(" "),n("h2",{attrs:{id:"两个引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两个引用"}},[t._v("#")]),t._v(" 两个引用")]),t._v(" "),n("p",[t._v("现在让我们想象下，我们把 "),n("code",[t._v("user")]),t._v(" 的引用复制给 "),n("code",[t._v("admin")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// user 对对象有一个引用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" admin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(213),alt:""}})]),t._v(" "),n("p",[t._v("现在如果像刚才一样：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("……然后对象仍然可以通过 "),n("code",[t._v("admin")]),t._v(" 这个全局变量访问到，所以对象还在内存中。如果我们又覆盖了 "),n("code",[t._v("admin")]),t._v("，对象就会被删除。")]),t._v(" "),n("h2",{attrs:{id:"相互关联的对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相互关联的对象"}},[t._v("#")]),t._v(" 相互关联的对象")]),t._v(" "),n("p",[t._v("现在来看一个更复杂的例子。这是个家庭：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("marry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("man"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" woman")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\twoman"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("husband "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" man"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tman"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wife "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" woman"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfather"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" man"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tmother"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" woman"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" family "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("marry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ann"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("code",[t._v("marry")]),t._v(" 方法通过两个对象的引用，让它们『结婚』了，并返回了一个包含这两个对象的新对象。")]),t._v(" "),n("p",[t._v("由此产生的内存结构：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(214),alt:""}})]),t._v(" "),n("p",[t._v("到目前位置，所有对象都是可达的。")]),t._v(" "),n("p",[t._v("现在让我们移除两个引用：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" family"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" family"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mother"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("husband"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(215),alt:""}})]),t._v(" "),n("p",[t._v("仅删除这两个引用中的一个是不够的，因为所有的对象仍然可以访问。")]),t._v(" "),n("p",[t._v("但是，如果我们把这两个都删除，那么我们可以看到再也没有对 John 的引用：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(216),alt:""}})]),t._v(" "),n("p",[t._v("对外引用不重要，只有传入引用才可以使对象可达。所以，John 现在无法访问，并且将从内存中释放，同时 John 的所有数据也变得无法访问。")]),t._v(" "),n("p",[t._v("经过垃圾回收：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(217),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"无法到达的岛屿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无法到达的岛屿"}},[t._v("#")]),t._v(" 无法到达的岛屿")]),t._v(" "),n("p",[t._v("几个对象相互引用，但外部没有对其任意对象的引用，这些对象可能是不可达的，并会从内存中释放。")]),t._v(" "),n("p",[t._v("源对象与上面相同。然后：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("family "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("内存内部状态将变成：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(218),alt:""}})]),t._v(" "),n("p",[t._v("这个例子展示了可达性概念的重要性。")]),t._v(" "),n("p",[t._v("显而易见，John 和 Ann 仍然连着，都有传入的引用。但是，这样还是不够。")]),t._v(" "),n("p",[t._v("前面说的 "),n("code",[t._v('"family"')]),t._v(" 对象已经不再连着根，再也没有引用，所以它将变成一座『孤岛』并且将被移除。")]),t._v(" "),n("h2",{attrs:{id:"内部算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部算法"}},[t._v("#")]),t._v(" 内部算法")]),t._v(" "),n("p",[t._v('垃圾回收的基本算法被称为 "mark-and-sweep"。')]),t._v(" "),n("p",[t._v("定期执行以下“垃圾回收”步骤：")]),t._v(" "),n("ul",[n("li",[t._v("垃圾收集器找到所有的根，并“标记”（记住）它们。")]),t._v(" "),n("li",[t._v('然后它遍历并"标记"来自它们的所有参考。')]),t._v(" "),n("li",[t._v("然后它遍历到标记的对象并标记"),n("strong",[t._v("他们的")]),t._v("引用。所有被遍历到的对象都会被记住，以免将来再次遍历到同一个对象。")]),t._v(" "),n("li",[t._v("...一直这样，直到有未访问的引用（从根访问到）。")]),t._v(" "),n("li",[t._v("没有被标记的所有对象都被删除。")])]),t._v(" "),n("p",[t._v("例如，让我们的对象结构如下所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(219),alt:""}})]),t._v(" "),n("p",[t._v('我们可以在右侧清楚地看到一个『无法到达的岛屿』。现在我们来看看"mark-and-sweep"垃圾收集器如何处理它。')]),t._v(" "),n("p",[t._v("第一步标记所有的根：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(220),alt:""}})]),t._v(" "),n("p",[t._v("然后他们的引用被标记了：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(221),alt:""}})]),t._v(" "),n("p",[t._v("...如果还有引用的话，继续标记：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(222),alt:""}})]),t._v(" "),n("p",[t._v("现在，这个过程中没有被遍历过的对象将会被删除。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(223),alt:""}})]),t._v(" "),n("p",[t._v("这是垃圾收集如何工作的概念。")]),t._v(" "),n("p",[t._v("JavaScript 引擎做了许多优化，使其运行速度更快，并且不会影响代码运行。")]),t._v(" "),n("p",[t._v("一些优化点：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("分代收集")]),t._v(" —— 对象被分成两组：『新的』和『旧的』。许多对象出现，完成他们的工作并快速释放，他们可以很快被清理。那些长期存活下来的对象会变得『老旧』，而且检查的次数也会减少。")]),t._v(" "),n("li",[n("strong",[t._v("增量收集")]),t._v(" —— 如果有许多对象，并且我们试图一次遍历并标记整个对象集，则可能需要一些时间并在执行过程中带来明显的延迟。所以引擎试图将垃圾收集工作分成几部分来做，然后将这几部分逐一处理。这需要他们之间额外的标记来追踪变化，但是会有许多微小的延迟而不是大的延迟。")]),t._v(" "),n("li",[n("strong",[t._v("闲时收集")]),t._v(" —— 垃圾收集器只会在 CPU 空闲时尝试运行，以减少可能对代码执行的影响。")])]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("主要需要掌握的东西：")]),t._v(" "),n("ul",[n("li",[t._v("垃圾回收是自动完成的，我们不能强制执行或是阻止执行。")]),t._v(" "),n("li",[t._v("当对象是可达状态时，它在内存中是可达的。")]),t._v(" "),n("li",[t._v("被引用与可访问（从一个根）不同：一组相互连接的对象可能整体都无法访问。")])]),t._v(" "),n("p",[t._v("现代引擎实现了垃圾回收的高级算法。")]),t._v(" "),n("p",[t._v("如果你熟悉低级编程，关于 V8 引擎垃圾回收器的更详细信息请参阅文章 "),n("a",{attrs:{href:"http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8 的垃圾回收：垃圾回收"),n("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=r.exports}}]);