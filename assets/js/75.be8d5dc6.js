(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{376:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("p",[s("code",[t._v("RegExp")]),t._v(" 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。")]),t._v(" "),s("p",[t._v("正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑")]),t._v(" "),s("p",[t._v("它描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。")]),t._v(" "),s("p",[t._v("有一定难度，不要求非常熟练，但至少会表单验证")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3school 链接"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"正则表达式的特点是："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的特点是："}},[t._v("#")]),t._v(" 正则表达式的特点是：")]),t._v(" "),s("ol",[s("li",[t._v("灵活性、逻辑性和功能性非常的强；")]),t._v(" "),s("li",[t._v("可以迅速地用极简单的方式达到字符串的复杂控制。")]),t._v(" "),s("li",[t._v("对于刚接触的人来说，比较晦涩难懂。")]),t._v(" "),s("li",[t._v("就算会写，写的过程没问题，写完再看几乎不认识。")])]),t._v(" "),s("p",[t._v("比如：\n匹配国内电话号码： /\\d{3}-\\d{8}|\\d{4}-\\d{7}/\n验证手机号： /^((13[0-9])|(15,[^4,\\D])|(18[0,5-9]))\\d{8}$/")]),t._v(" "),s("p",[t._v("很难记住")]),t._v(" "),s("h3",{attrs:{id:"创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建方式"}},[t._v("#")]),t._v(" 创建方式")]),t._v(" "),s("ol",[s("li",[t._v("字面量形式创建")])]),t._v(" "),s("p",[s("code",[t._v("/pattern/attributes")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("构造函数的方式创建")])]),t._v(" "),s("p",[s("code",[t._v("new RegExp(pattern, attributes);")])]),t._v(" "),s("blockquote",[s("p",[t._v("参数 "),s("code",[t._v("pattern")]),t._v(" 是一个字符串，指定了正则表达式的模式或其他正则表达式。")]),t._v(" "),s("p",[t._v("参数 "),s("code",[t._v("attributes")]),t._v(' 是一个可选的字符串，包含属性 "g"、"i" 和 "m"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 '),s("code",[t._v("pattern")]),t._v(" 是正则表达式，而不是字符串，则必须省略该参数。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 字面量形式创建\t\t/pattern/attributes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a/gi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 构造函数的方式创建\t\tnew RegExp(pattern, attributes);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab AB1Ab\\naB1239ab"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 构造函数复制之前的正则对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个新的地址,然后保存值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝的是一个地址")]),t._v("\n")])])]),s("h3",{attrs:{id:"使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nreg.test(str);\t\t// 检验字符串是否有符合正则条件的字符串片段，返回 true/false\nreg.exec(str);\t\t// 检索字符串中指定的值。返回找到的值，并确定其位置\nstr.match(reg);\t\t// 返回符合正则表达式的字符串片段\n\n")])])]),s("p",[s("code",[t._v("reg.lastIndex")]),t._v("(可读写) 标示开始下一次匹配的字符位置 跟"),s("code",[t._v("reg.exec()")]),t._v(" 协调使用")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abababa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/ab/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也可以手动设置 lastIndex")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则表达式reg中不写 g 属性，exec只返回匹配到的第一次的子串及下标")]),t._v("\n")])])]),s("h3",{attrs:{id:"组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[t._v("#")]),t._v(" 组合 []")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("表达式")]),t._v(" "),s("th",[t._v("介绍")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("[adgk]")]),t._v(" "),s("td",[t._v("查找给定集合内的任何字符。")])]),t._v(" "),s("tr",[s("td",[t._v("[0-9]")]),t._v(" "),s("td",[t._v("查找任何从 0 至 9 的数字。")])]),t._v(" "),s("tr",[s("td",[t._v("[a-z]")]),t._v(" "),s("td",[t._v("查找任何从小写 a 到小写 z 的字符。")])]),t._v(" "),s("tr",[s("td",[t._v("[A-Z]")]),t._v(" "),s("td",[t._v("查找任何从大写 A 到大写 Z 的字符。")])]),t._v(" "),s("tr",[s("td",[t._v("[A-z]")]),t._v(" "),s("td",[t._v("查找任何从大写 A 到小写 z 的字符。")])])])]),t._v(" "),s("h3",{attrs:{id:"边界"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#边界"}},[t._v("#")]),t._v(" 边界")]),t._v(" "),s("ul",[s("li",[t._v('^ 以什么开头 /^a/.test("ba")')]),t._v(" "),s("li",[t._v('$ 以什么结尾\t\t\t/a$/.test("ba")')]),t._v(" "),s("li",[s("strong",[t._v('注意：^在[]中表示 非 例如：/[^a]/.test("b")')])])]),t._v(" "),s("h3",{attrs:{id:"量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("* 重复零次或更多 >=0")])]),t._v(" "),s("li",[s("p",[t._v("+ 重复一次或更多次 >=1")])]),t._v(" "),s("li",[s("p",[t._v('? 重复零次或一次 (0 || 1) /[a-z]?/.test("aa")')])]),t._v(" "),s("li",[s("p",[t._v('{n} n 次 （x=n） /[1-9]{5}/.test("1234")')])]),t._v(" "),s("li",[s("p",[t._v('{n,} 重复 n 次或更多 (x>=n) "a123b4567".match(/[0-9]{2,}/g)')])]),t._v(" "),s("li",[s("p",[t._v('{n,m} 重复出现的次数比 n 多但比 m 少 (n<=x<=m) /[0-9]{3,5}/.test("a123bcd")')])]),t._v(" "),s("li",[s("p",[t._v("x|y x 或者 y")])]),t._v(" "),s("li",[s("p",[t._v('() 完全匹配 "abcdebfg".match(/(ab|bf)c/g)')])]),t._v(" "),s("li",[s("p",[t._v("/a{1,3}?/ 能取 1 个不取三个 ?加在量词之后表示打破贪婪匹配，能取少，不取多")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaaabbbaaaaaaaaabbaaaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a{3,5}/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// log: ["aaaa", "aaaaa", "aaaa", "aaaa"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaaaaaaaaaaaaaaaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a+/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// log: ["aaaaaaaaaaaaaaaaa"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaaaaaaaaaaaaaaaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a+?/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// log: ["a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaaabbbaaaaaaaaabbaaaa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a{3,5}?/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// log:  ["aaa", "aaa", "aaa", "aaa", "aaa"]')]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",[t._v("查找单个字符，除了换行和行结束符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("查找单词字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("查找非单词字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("查找数字。")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("查找非数字字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("查找空白字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("查找非空白字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配单词边界。")])]),t._v(" "),s("tr",[s("td",[t._v("\\B")]),t._v(" "),s("td",[t._v("匹配非单词边界。")])])])]),t._v(" "),s("p",[s("strong",[t._v("注意：\\b 和 \\B 是根据方向存在的")])]),t._v(" "),s("p",[t._v("题目：")]),t._v(" "),s("ol",[s("li",[t._v("写一个正则表达式，检验字符串首尾是否是数字?检验首尾是否都是数字?\n答: /^\\d|\\d$/  和 /^\\d[\\w\\W]*\\d$/")]),t._v(" "),s("li",[t._v("校验 1-200 的整数\n答: /^(1\\d{2}|[1-9]\\d?|200)$/")]),t._v(" "),s("li",[t._v("电话号码验证: 以 13/15/18(0-9) 或 145/147/149 或 166 或 17(0-8) 或 198/199 开头后面跟任意 8 个数字\n答: /^1([358]\\d|4[579]|66|7[0-8]|9[89])\\d{8}$/")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://regexper.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则查看器"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);