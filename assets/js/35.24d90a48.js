(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{279:function(t,e,a){"use strict";a.r(e);var v=a(2),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"开发环境相关知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发环境相关知识点"}},[t._v("#")]),t._v(" 开发环境相关知识点")]),t._v(" "),a("p",[t._v("工程师的开发环境决定其开发效率，常用的开发环境配置也是面试考查点之一。")]),t._v(" "),a("h2",{attrs:{id:"知识点梳理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点梳理"}},[t._v("#")]),t._v(" 知识点梳理")]),t._v(" "),a("ul",[a("li",[t._v("IDE")]),t._v(" "),a("li",[t._v("Git")]),t._v(" "),a("li",[t._v("Linux 基础命令")]),t._v(" "),a("li",[t._v("前端构建工具")]),t._v(" "),a("li",[t._v("调试方法")])]),t._v(" "),a("p",[t._v("重点介绍 Git 的基本用法、代码部署和开发中常用的 Linux 命令，然后以 webpack 为例介绍下前端构建工具，最后介绍怎么抓包解决线上问题。这些都是日常开发和面试中常用到的知识。")]),t._v(" "),a("h2",{attrs:{id:"ide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ide"}},[t._v("#")]),t._v(" IDE")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：你平时都使用什么 IDE 编程？有何提高效率的方法？")])]),t._v(" "),a("p",[t._v("前端最常用的 IDE 有 "),a("a",{attrs:{href:"https://www.jetbrains.com/webstorm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webstorm"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://www.sublimetext.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sublime"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://atom.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atom"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSCode"),a("OutboundLink")],1),t._v("，我们可以分别去它们的官网看一下。")]),t._v(" "),a("p",[t._v("Webstorm 是最强大的编辑器，因为它拥有各种强大的插件和功能，但是我没有用过，因为它收费。不是我舍不得花钱，而是因为我觉得免费的 Sublime 已经够我用了。跟面试官聊到 Webstorm 的时候，没用过没事儿，但一定要知道它：第一，强大；第二，收费。")]),t._v(" "),a("p",[t._v("Sublime 是我日常用的编辑器，第一它免费，第二它轻量、高效，第三它插件非常多。用 Sublime 一定要安装各种插件配合使用，可以去网上搜一下“sublime”常用插件的安装以及用法，还有它的各种快捷键，并且亲自使用它。这里就不一一演示了，网上的教程也很傻瓜式。")]),t._v(" "),a("p",[t._v("Atom 是 GitHub 出品的编辑器，跟 Sublime 差不多，免费并且插件丰富，而且跟 Sublime 相比风格上还有些小清新。但是我用过几次就不用了，因此它打开的时候会比较慢，卡一下才打开。当然总体来说也是很好用的，只是个人习惯问题。")]),t._v(" "),a("p",[t._v("VSCode 是微软出品的轻量级（相对于 Visual Studio 来说）编辑器，微软做 IDE 那是出了名的好，出了名的大而全，因此 VSCode 也有上述 Sublime 和 Atom 的各种优点，但是我也是因为个人习惯问题（本人不愿意尝试没有新意的新东西），用过几次就不用了。")]),t._v(" "),a("p",[t._v("总结一下：")]),t._v(" "),a("ul",[a("li",[t._v("如果你要走大牛、大咖、逼格的路线，就用 Webstorm")]),t._v(" "),a("li",[t._v("如果你走普通、屌丝、低调路线，就用 Sublime")]),t._v(" "),a("li",[t._v("如果你走小清新、个性路线，就用 VSCode 或者 Atom")]),t._v(" "),a("li",[t._v("如果你面试，最好有一个用的熟悉，其他都会一点")])]),t._v(" "),a("p",[t._v("最后注意：千万不要说你使用 Dreamweaver 或者 notepad++ 写前端代码，会被人鄙视的。如果你不做 .NET 也不要用 Visual Studio ，不做 Java 也不要用 Eclipse。")]),t._v(" "),a("h2",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),a("p",[t._v("你此前做过的项目一定要用过 Git，而且必须是命令行，如果没用过，你自己也得恶补一下。对 Git 的基本应用比较熟悉的同学，可以跳过这一部分了。macOS 自带 Git，Windows 需要安装 Git 客户端，去 "),a("a",{attrs:{href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 官网"),a("OutboundLink")],1),t._v(" 下载即可。")]),t._v(" "),a("p",[t._v("国内比较好的 Git 服务商有 coding.net，国外有大名鼎鼎的 GitHub，但是有时会有网络问题，因此建议大家注册一个 coding.net 账号然后创建项目，来练练手。")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：常用的 Git 命令有哪些？如何使用 Git 多人协作开发？")])]),t._v(" "),a("h3",{attrs:{id:"常用的-git-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的-git-命令"}},[t._v("#")]),t._v(" 常用的 Git 命令")]),t._v(" "),a("p",[t._v("首先，通过"),a("code",[t._v("git clone <项目远程地址>")]),t._v("下载下来最新的代码，例如"),a("code",[t._v("git clone git@git.coding.net:username/project-name.git")]),t._v("，默认会下载"),a("code",[t._v("master")]),t._v("分支。")]),t._v(" "),a("p",[t._v("然后修改代码，修改过程中可以通过"),a("code",[t._v("git status")]),t._v("看到自己的修改情况，通过"),a("code",[t._v("git diff <文件名>")]),t._v("可查阅单个文件的差异。")]),t._v(" "),a("p",[t._v("最后，将修改的内容提交到远程服务器，做如下操作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git add .\ngit commit -m "xxx"\ngit push origin master\n\n')])])]),a("p",[t._v("如果别人也提交了代码，你想同步别人提交的内容，执行"),a("code",[t._v("git pull origin master")]),t._v("即可。")]),t._v(" "),a("h3",{attrs:{id:"如何多人协作开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何多人协作开发"}},[t._v("#")]),t._v(" 如何多人协作开发")]),t._v(" "),a("p",[t._v("多人协作开发，就不能使用"),a("code",[t._v("master")]),t._v("分支了，而是要每个开发者单独拉一个分支，使用"),a("code",[t._v("git checkout -b <branchname>")]),t._v("，运行"),a("code",[t._v("git branch")]),t._v("可以看到本地所有的分支名称。")]),t._v(" "),a("p",[t._v("自己的分支，如果想同步"),a("code",[t._v("master")]),t._v("分支的内容，可运行"),a("code",[t._v("git merge master")]),t._v("。切换分支可使用"),a("code",[t._v("git checkout <branchname>")]),t._v("。")]),t._v(" "),a("p",[t._v("在自己的分支上修改了内容，可以将自己的分支提交到远程服务器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git add .\ngit commit -m "xxx"\ngit push origin <branchname>\n\n')])])]),a("p",[t._v("最后，待代码测试没问题，再将自己分支的内容合并到"),a("code",[t._v("master")]),t._v("分支，然后提交到远程服务器。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout master\ngit merge <branchname>\ngit push origin master\n\n")])])]),a("h3",{attrs:{id:"关于-svn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-svn"}},[t._v("#")]),t._v(" 关于 SVN")]),t._v(" "),a("p",[t._v("关于 SVN 笔者的态度和针对 IE 低版本浏览器的态度一样，你只需要查询资料简单了解一下。面试的时候可能会问到，但你只要熟悉了 Git 的操作，面试官不会因为你不熟悉 SVN 而难为你。前提是你要知道一点 SVN 的基本命令，自己上网一查就行。")]),t._v(" "),a("p",[t._v("不过 SVN 和 Git 的区别你得了解。SVN 是每一步操作都离不开服务器，创建分支、提交代码都需要连接服务器。而 Git 就不一样了，你可以在本地创建分支、提交代码，最后再一起 push 到服务器上。因此，Git 拥有 SVN 的所有功能，但是却比 SVN 强大得多。（Git 是 Linux 的创始人 Linus 发明的东西，因此也倍得推崇。）")]),t._v(" "),a("h2",{attrs:{id:"linux-基础命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-基础命令"}},[t._v("#")]),t._v(" Linux 基础命令")]),t._v(" "),a("p",[t._v("目前互联网公司的线上服务器都使用 Linux 系统，测试环境为了保证和线上一致，肯定也是使用 Linux 系统，而且都是命令行的，没有桌面，不能用鼠标操作。因此，掌握基础的 Linux 命令是非常必要的。下面总结一些最常用的 Linux 命令，建议大家在真实的 Linux 系统下亲自试一下。")]),t._v(" "),a("p",[t._v("关于如何得到 Linux 系统，有两种选择：第一，在自己电脑的虚拟机中安装一个 Linux 系统，例如 Ubuntu/CentOS 等，下载这些都不用花钱；第二，花钱去阿里云等云服务商租一个最便宜的 Linux 虚拟机。推荐第二种。一般正式入职之后，公司都会给你分配开发机或者测试机，给你账号和密码，你自己可以远程登录。")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：常见 linux 命令有哪些？")])]),t._v(" "),a("h3",{attrs:{id:"登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录"}},[t._v("#")]),t._v(" 登录")]),t._v(" "),a("p",[t._v("入职之后，一般会有现有的用户名和密码给你，你拿来之后直接登录就行。运行 "),a("code",[t._v("ssh name@server")]),t._v(" 然后输入密码即可登录。")]),t._v(" "),a("h3",{attrs:{id:"目录操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录操作"}},[t._v("#")]),t._v(" 目录操作")]),t._v(" "),a("ul",[a("li",[t._v("创建目录 "),a("code",[t._v("mkdir <目录名称>")])]),t._v(" "),a("li",[t._v("删除目录 "),a("code",[t._v("rm <目录名称>")])]),t._v(" "),a("li",[t._v("定位目录 "),a("code",[t._v("cd <目录名称>")])]),t._v(" "),a("li",[t._v("查看目录文件 "),a("code",[t._v("ls")]),t._v(" "),a("code",[t._v("ll")])]),t._v(" "),a("li",[t._v("修改目录名 "),a("code",[t._v("mv <目录名称> <新目录名称>")])]),t._v(" "),a("li",[t._v("拷贝目录 "),a("code",[t._v("cp <目录名称> <新目录名称>")])])]),t._v(" "),a("h3",{attrs:{id:"文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[t._v("#")]),t._v(" 文件操作")]),t._v(" "),a("ul",[a("li",[t._v("创建文件 "),a("code",[t._v("touch <文件名称>")]),t._v(" "),a("code",[t._v("vi <文件名称>")])]),t._v(" "),a("li",[t._v("删除文件 "),a("code",[t._v("rm <文件名称>")])]),t._v(" "),a("li",[t._v("修改文件名 "),a("code",[t._v("mv <文件名称> <新文件名称>")])]),t._v(" "),a("li",[t._v("拷贝文件 "),a("code",[t._v("cp <文件名称> <新文件名称>")])])]),t._v(" "),a("h3",{attrs:{id:"文件内容操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件内容操作"}},[t._v("#")]),t._v(" 文件内容操作")]),t._v(" "),a("ul",[a("li",[t._v("查看文件 "),a("code",[t._v("cat <文件名称>")]),t._v(" "),a("code",[t._v("head <文件名称>")]),t._v(" "),a("code",[t._v("tail <文件名称>")])]),t._v(" "),a("li",[t._v("编辑文件内容 "),a("code",[t._v("vi <文件名称>")])]),t._v(" "),a("li",[t._v("查找文件内容 "),a("code",[t._v("grep '关键字' <文件名称>")])])]),t._v(" "),a("h2",{attrs:{id:"前端构建工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端构建工具"}},[t._v("#")]),t._v(" 前端构建工具")]),t._v(" "),a("p",[t._v("构建工具是前端工程化中不可缺少的一环，非常重要，而在面试中却有其特殊性 —— "),a("strong",[t._v("面试官会通过询问构建工具的作用、目的来询问你对构建工具的了解，只要这些你都知道，不会再追问细节")]),t._v("。因为，在实际工作中，真正能让你编写构建工具配置文件的机会非常少，一个项目就配置一次，后面就很少改动了。而且，如果是大众使用的框架（如 React、Vue 等），还会直接有现成的脚手架工具，一键创建开发环境，不用手动配置。")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：前端为何要使用构建工具？它解决了什么问题？")])]),t._v(" "),a("h3",{attrs:{id:"何为构建工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为构建工具"}},[t._v("#")]),t._v(" 何为构建工具")]),t._v(" "),a("p",[t._v("“构建”也可理解为“编译”，就是将开发环境的代码转换成运行环境代码的过程。"),a("strong",[t._v("开发环境的代码是为了更好地阅读，而运行环境的代码是为了更快地执行，两者目的不一样，因此代码形式也不一样")]),t._v("。例如，开发环境写的 JS 代码，要通过混淆压缩之后才能放在线上运行，因为这样代码体积更小，而且对代码执行不会有任何影响。总结一下需要构建工具处理的几种情况：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("处理模块化")]),t._v("：CSS 和 JS 的模块化语法，目前都无法被浏览器兼容。因此，开发环境可以使用既定的模块化语法，但是需要构建工具将模块化语法编译为浏览器可识别形式。例如，使用 webpack、Rollup 等处理 JS 模块化。")]),t._v(" "),a("li",[a("strong",[t._v("编译语法")]),t._v("：编写 CSS 时使用 Less、Sass，编写 JS 时使用 ES6、TypeScript 等。这些标准目前也都无法被浏览器兼容，因此需要构建工具编译，例如使用 Babel 编译 ES6 语法。")]),t._v(" "),a("li",[a("strong",[t._v("代码压缩")]),t._v("：将 CSS、JS 代码混淆压缩，为了让代码体积更小，加载更快。")])]),t._v(" "),a("h3",{attrs:{id:"构建工具介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建工具介绍"}},[t._v("#")]),t._v(" 构建工具介绍")]),t._v(" "),a("p",[t._v("最早普及使用的构建工具是 "),a("a",{attrs:{href:"http://www.gruntjs.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Grunt"),a("OutboundLink")],1),t._v(" ，不久又被 "),a("a",{attrs:{href:"https://www.gulpjs.com.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gulp"),a("OutboundLink")],1),t._v(" 给追赶上。Gulp 因其简单的配置以及高效的性能而被大家所接受，也是笔者个人比较推荐的构建工具之一。如果你做一些简单的 JS 开发，可以考虑使用。")]),t._v(" "),a("p",[t._v("如果你的项目比较复杂，而且是多人开发，那么你就需要掌握目前构建工具届的神器 —— webpack 。不过神器也有一个缺点，就是学习成本比较高，需要拿出专门的时间来专心学习，而不是三言两语就能讲完的。我们下面就演示一下 webpack 最简单的使用，全面的学习还得靠大家去认真查阅相关文档，或者参考专门讲解 webpack 的教程。")]),t._v(" "),a("h3",{attrs:{id:"webpack-演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-演示"}},[t._v("#")]),t._v(" webpack 演示")]),t._v(" "),a("p",[t._v("接下来我们演示一下 webpack 处理模块化和混淆压缩代码这两个基本功能。")]),t._v(" "),a("p",[t._v("首先，你需要安装 Node.js，没有安装的可以去 "),a("a",{attrs:{href:"http://nodejs.cn/download/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js 官网"),a("OutboundLink")],1),t._v(" 下载并安装。安装完成后运行如下命令来验证是否安装成功。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("node -v\nnpm -v\n\n")])])]),a("p",[t._v("然后，新建一个目录，进入该目录，运行"),a("code",[t._v("npm init")]),t._v("，按照提示输入名称、版本、描述等信息。完成之后，该目录下出现了一个"),a("code",[t._v("package.json")]),t._v("文件，是一个 JSON 文件。")]),t._v(" "),a("p",[t._v("接下来，安装 wepback，运行"),a("code",[t._v("npm i --save-dev webpack")]),t._v("，网络原因需要耐心等待几分钟。")]),t._v(" "),a("p",[t._v("接下来，编写源代码，在该目录下创建"),a("code",[t._v("src")]),t._v("文件夹，并在其中创建"),a("code",[t._v("app.js")]),t._v("和"),a("code",[t._v("dt.js")]),t._v("两个文件，文件内容分别是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// dt.js 内容\nmodule.exports = {\n    getDateNow: function () {\n        return Date.now()\n    }\n}\n\n// app.js 内容\nvar dt = require('./dt.js')\nalert(dt.getDateNow())\n\n")])])]),a("p",[t._v("然后，再返回上一层目录，新建"),a("code",[t._v("index.html")]),t._v("文件（该文件和"),a("code",[t._v("src")]),t._v("属于同一层级），内容是")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <div>test</div>\n\n    <script src='./dist/bundle.js'><\/script>\n</body>\n</html>\n\n")])])]),a("p",[t._v("然后，编写 webpack 配置文件，新建"),a("code",[t._v("webpack.config.js")]),t._v("，内容是")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  context: path.resolve(__dirname, './src'),\n  entry: {\n    app: './app.js',\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n          //supresses warnings, usually from module minification\n          warnings: false\n        }\n    }),\n  ]\n};\n\n")])])]),a("p",[t._v("总结一下，目前项目的文件目录是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("src\n  +-- app.js\n  +-- dt.js\nindex.html\npackage.json\nwebpack.config.js\n\n")])])]),a("p",[t._v("接下来，打开"),a("code",[t._v("package.json")]),t._v("，然后修改其中"),a("code",[t._v("scripts")]),t._v("的内容为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  "scripts": {\n    "start": "webpack"\n  }\n\n')])])]),a("p",[t._v("在命令行中运行"),a("code",[t._v("npm start")]),t._v("，即可看到编译的结果，最后在浏览器中打开"),a("code",[t._v("index.html")]),t._v("，即可弹出"),a("code",[t._v("Date.now()")]),t._v("的值。")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("最后再次强调，"),a("strong",[t._v("深刻理解构建工具存在的价值，比你多会一些配置代码更加有意义，特别是对于应对面试来说")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"调试方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试方法"}},[t._v("#")]),t._v(" 调试方法")]),t._v(" "),a("p",[t._v("调试方法这块被考查最多的就是如何进行抓包。")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：如何抓取数据？如何使用工具来配置代理？")])]),t._v(" "),a("p",[t._v("PC 端的网页，我们可以通过 Chrome、Firefox 等浏览器自带的开发者工具来查看网页的所有网络请求，以帮助排查 bug。这种监听、查看网络请求的操作称为"),a("strong",[t._v("抓包")]),t._v("。")]),t._v(" "),a("p",[t._v("针对移动端的抓包工具，Mac 系统下推荐使用 Charles 这个工具，首先 "),a("a",{attrs:{href:"https://www.charlesproxy.com/download/",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载"),a("OutboundLink")],1),t._v(" 并安装，打开。Windows 系统推荐使用 "),a("a",{attrs:{href:"http://rj.baidu.com/soft/detail/10963.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fiddler"),a("OutboundLink")],1),t._v("，下载安装打开。两者使用基本一致，下面以 Charles 为例介绍。")]),t._v(" "),a("p",[t._v("接下来，将安装好 Charles 的电脑和要抓包的手机，连接到同一个网络（一般为公司统一提供的内网，由专业网络工程师搭建），保证 IP 段相同。然后，将手机设置网络代理（每种不同手机如何设置网络代理，网上都有傻瓜式教程），代理的 IP 为电脑的 IP，代理的端口为"),a("code",[t._v("8888")]),t._v("。然后，Charles 可能会有一个弹框提示是否允许连接代理，这里选择“允许”即可。这样，使用手机端访问的网页或者联网的请求，Charles 就能监听到了。")]),t._v(" "),a("p",[t._v("在开发过程中，经常用到抓包工具来做代理，将线上的地址代理到测试环境，Charles 和 Fiddler 都可实现这个功能。以 Charles 为例，点击菜单栏中 Tools 菜单，然后二级菜单中点击 Map Remote，会弹出配置框。首先，选中 Enable Map Remote 复选框，然后点击 Add 按钮，添加一个代理项。例如，如果要将线上的"),a("code",[t._v("https://www.aaa.com/api/getuser?name=xxx")]),t._v("这个地址代理到测试地址"),a("code",[t._v("http://168.1.1.100:8080/api/getuser?name=xxx")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/2/23/161c1072d8df80e1?w=880&h=1076&f=png&s=112978",alt:""}})])])}),[],!1,null,null,null);e.default=_.exports}}]);